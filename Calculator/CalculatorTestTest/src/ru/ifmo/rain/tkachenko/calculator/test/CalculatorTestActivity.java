package ru.ifmo.rain.tkachenko.calculator.test;

import junit.framework.Assert;
import ru.ifmo.rain.tkachenko.calculator.MainActivity;
import android.test.ActivityInstrumentationTestCase2;

public class CalculatorTestActivity extends
		ActivityInstrumentationTestCase2<MainActivity> {

	public CalculatorTestActivity() {
		super(MainActivity.class);
	}

	private boolean isCorrect(MainActivity o, String query, String ans,
			boolean isDouble) {
		if (isDouble) {
			Double curAns = Double.parseDouble(o.getResult(query));
			return Math.abs(Double.parseDouble(ans) - curAns) < 1e-7;
		}
		return o.getResult(query).equals(ans);
	}

	public void testCaseIllegal0() {
		String test = "0 0";
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o, test, MainActivity.NOT_PARSE, false));
	}
	
	public void test2plus2() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o, "2+ 2", "4", true));
	}
	
	public void testUnparsable1() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o, "()", MainActivity.NOT_PARSE, false));
	}

	public void testUnparsable2() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o, "(+)", MainActivity.NOT_PARSE, false));
	}

	public void testUnparsable3() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o, "(-3)(-3)", MainActivity.NOT_PARSE,
				false));
	}

	public void testUnparsable4() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o, "(--3)", MainActivity.NOT_PARSE, false));
	}

	public void testUnparsable5() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o, "-(3)-", MainActivity.NOT_PARSE, false));
	}

	public void testUnparsable6() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o, "-3-3,0", MainActivity.NOT_PARSE, false));
	}

	public void testUnparsable7() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o, "-3(+2)", MainActivity.NOT_PARSE, false));
	}

	public void testUnparsable8() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o, "*7*(3+3)", MainActivity.NOT_PARSE,
				false));
	}

	public void testUnparsable9() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o, ") + (3)", MainActivity.NOT_PARSE, false));
	}

	public void testUnparsable10() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o, "(7+(7+3)", MainActivity.NOT_PARSE,
				false));
	}

	public void testUnparsable11() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o, "9-", MainActivity.NOT_PARSE, false));
	}

	public void testPlusMinusACExpressionWithoutBrackets1() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"494172300+55152570-430913189-399879380+237476814-109704770+108258402-372053819+6676456-224273115-184039496+453801140+468729214+491925703+139738833",
				"735067663", true));
	}

	public void testPlusMinusACExpressionWithoutBrackets2() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"453361096+370147400-254340972-367511687-256435337+164496966-185064158+433382283+102061222-3846338-353850831+239089900-128308775+100259541+339212503+446856451-466539807+126975088+145203003+12432338-15939476-127429545+162723191+268903476-389033800+123331509-34035357+379802640-300522558-412319218-198187937+401778737-160544399-166857669-140481535-29049874+87251674+131956539+352375864+344298352+496649828+117212378-405462910-394387104-1782502-413307207+214562561+132029384-453517290-65394526+266420064-413383077+423541901+344357739-487130220-108939346+496500197+487015300-417286901-491963432+163364313-70787287+144436653-114171223+484514109-304575251-493453759-164296702-379841380+281644655-123385620+174581297-20641628-327254709+7751676-257196365+203058393-396302139+330798062-120072966-386077994-265430571+377619658-54982962+275289091-119902263-197201781-419960303-415635916+241823151+78529623+259442430+13989545-251916690-158066186-496822909-381185441+2536523+481670386+308141192-325188956-193487689-70207955+163194151-397945431",
				"-2392271831", true));
	}

	public void testPlusMinusACExpressionWithoutBrackets3() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"+186798532-62628803-199084352+12306970+359819974+228456991-163903214-80166920-284429388+357512247-316752680-282443815+318760569+209010724-409310061-360116310-386779452+7663118-213784400-484132961+357645664+272168591-4126677+202922291+337056418-280761537+214768974+302791163+366375899+229474967-111941975+129580718+413329937+385246648-77521060+141257195+141676216",
				"1456740201", true));
	}

	public void testPlusMinusACExpressionWithoutBrackets4() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"469301461+301960503-454695485-390528350-368695973-470901560+24660262+230277525+340837778-330459451+298258040+366938558+300994597-370338223+385698599-240282786+192907777+170809165+232527631+406248268-465514374-364086404-428096823+436060706+20931108-87201967+49374493+265217633+288787426+137638660-222026575+192972329+57852412+213200472-462321595+238298207+375984721-453950694+297150301-268161386+253753549-471342753+321440741-472472241+472402694+70037465-374281157-453382260+450024402+270005502-423471602-160790777-349331470-288292649+110742369+219705864-482635285+311397735-300793937-27132185-97614603+108793270+325689118+368560397+349874041-219292133-96023542-101140955-259335841-435050900-417198598+72009540-181366652+418237448+97999688-478318392+413525873-44639474+30210561+434071716-96524844-330209616+356380378+95876251-182344577+190361672-139645391-354273866+122157535+91920516+19917496+205371991+61613796-306079884-156190801-395894009-234378391+403202344-21537760+479013077-93972740-143920001-362691687+152272536-326878359+174987242-49845052-75160441+225803746-133180856-231399002+102893799+47855304-346129935-205254288-370743841-148392936-207562802-487783321+26004085-90191195+425480457+454830175-438197043-412766605+383985826+191983548+242933419-151266830+323717071-454542627-340651751-337585606-30821279-56504836+135191600+289844868",
				"-2626721887", true));
	}

	public void testPlusMinusACExpressionWithoutBrackets5() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"104749374+79959561-270026144+461307282-378637815+14009373+481318720-469951514-350002201-380161737+77373774-36723094-90083471-329141721-468554327+257035625+478454078+140389944+386088199+65616538-384823504+492380382-181992040-242700027+13222682+58586288+204388727+5483408-419637381-188327932+83994172+434149926-329163161+313114406+114365870+64735107+191061638+45462068+208365973+43356574+47317558+28510386-250196788-201806664-397783317-23501832-445616188-241278036-15276886+442913094-1494558-488349687+210310517+138205121+106243163+314885709+302570878+362144690",
				"186840780", true));
	}

	public void testPlusMinusACExpressionWithoutBrackets6() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o,
				"24520242-250515322+331956301-253018391", "-147057170", true));
	}

	public void testPlusMinusACExpressionWithoutBrackets7() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-334283548+155872863+335557323+469618242+457815193-435268331+406241810-418314361-278420283-288339813-14358417-64065970-122393448-362700944+165965110-269760741-26002732+149680438-35731006+234850286-403713522",
				"-677751851", true));
	}

	public void testPlusMinusACExpressionWithoutBrackets8() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"+39971446-49356760+417914981-295886168-313213886-149640972-300948177+374305285+165231427-452214294-114025970-156648772+373816078-422668743-372475535-230983223+305648656-230643179+294555899+158961032+435824666+116879905-327173971+260569847+495199507+232247067+16159955+376797042-430863728-160315857+156241047+338605836-211278362+150262469-161547192-493143868+390556283+398498114-255338802+74692658+305350222+446198026+37243427+10417074+426471133+267422504+358825847+486778209+17565221-116623747-105814923-214368305-494109474+135678159+447715272",
				"2453320386", true));
	}

	public void testPlusMinusACExpressionWithoutBrackets9() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"427968707-447502054+30666018+202697040-303901487-264488628-475721938-209402920+227290179+451092559+119530188-346384474+288453725-328000862+364817449-89750121-250113944+141027072-278433793-214453498-321485275+95348503+303990591-10922023+475828501-303245500+466958434+301102846+34553129-275459449+483307470+77559524+235618463+449590957-491580927+166499164-32557252+336935427-420345769-269839463+485372713-276525530+436769911-465900458+400207720-407970314-191301536-118970346+437971953-32664407-80307444+228468615-109281427+468556283-185010754-74788864",
				"861872684", true));
	}

	public void testPlusMinusACExpressionWithoutBrackets10() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"368460307-50478039+27137801+408088865+207537338-411652047+51794806-190304932-281755343+374606376-289918285-308016410-411252596+144047197+252603735-167844701+490346108+367269074-123565265+219011638+254959311+208444068+284900562-407869163+111022935+188812148+14513041-271617484-294374667+219217724-81764177-202160623-319363287+2710106-58665245-30179851-388162689-383538847+418455395-297950753+478611226-190693373+76581425+258443798-471217341-437807645+382092773+364752556-415526114+37322519-490092621+251806978+220509981-128598945-464624454+463910465-143846310-266925454-224555031-114590716-374698601-349396364+287251598+481895699+288647119+482677637+490013565+459762808-387443341-374920487-479712359-286310568-397623665-395115902+380944165+490265601-158766435-45853925-56708469-61806869+351637221-254500426+21566532",
				"-1059137618", true));
	}

	public void testAllOperACExpressionWithoutBrackets1() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"+354.0-268.0*480*862-85.0+446.0+134.0/171-35.0*499*79-223.0-19.0/546-320.0*857+140.0/771/100*217/113-379.0*843/212*314*821-84.0/819/811-400.0/188*288+14.0/99/296/897*310-111.0/564+45.0*928*44-383.0*910*260/425*586-139.0*845*116*584/777+318.0*523*768/338-26.0*742/967+404.0*902/950+178.0*593*98/504-415.0+460.0/692/832/493*672+392.0*102*478/705*478+159.0+300.0-50.0*694*748*576*107+154.0/254/311*207+80.0/56*43+436.0*760*75/546+159.0/413+314.0-81.0+445.0/305*289/480*772-455.0/95/745-194.0*136/378/465+476.0*67/549-72.0/295/677/133*558+90.0/302*305/437+3.0*177*692*503*598+27.0+228.0-245.0*782*197+50.0*580/317/805*769-240.0-343.0*736-225.0*742-364.0/219-380.0-244.0/310/20*760+30.0-67.0*461*139/444/862-224.0-3.0+147.0/777/661*94+127.0*354/344/359*361+304.0*18*707-422.0*213+344.0/916-171.0/860*398/31+375.0/182*523*279-305.0/658/664/157/488+306.0*617/371*491*147-364.0/155/968/431/386-475.0+315.0/123-409.0*173/130-353.0*855-251.0*628/369/260+184.0*948/825*169+153.0*795*111*134-414.0",
				"-1.487977601824809E12", true));
	}

	public void testAllOperACExpressionWithoutBrackets2() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"+72.0/532*729*177/699-267.0*471/481/638*121+153.0*246*436*704-285.0-83.0/638*397/82+1.0/431+417.0*513+210.0/580-199.0*702*534*780+291.0/686/669/127+41.0/188*687+300.0*29*762-360.0/5*161/906+403.0+6.0/559+125.0*436-423.0/95*549/430-256.0/711*799-103.0/379/273/893/73-297.0/607+24.0-18.0*561*536*144-109.0*321/122*107/953+344.0*375/941",
				"-4.740675883379852E10", true));
	}

	public void testAllOperACExpressionWithoutBrackets3() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"+305.0*594+439.0*220/624/583-2.0/626-228.0/675*825-413.0/866/637+449.0/77/929/827*762+431.0*331*205+49.0-339.0/186*822+52.0*104/45*731/378-360.0+102.0*113*811*974/695-74.0/634/550-252.0*72*387/997-224.0*632-207.0-305.0/25*145*428+430.0-101.0/602*320/863+166.0+387.0/919/398/544/419-175.0*980*767*694-491.0/833+290.0+471.0/140*606/530+359.0*889/319*105/494+218.0*673+443.0+36.0*962*283-128.0*96*650+277.0/524*660*62*444-400.0+317.0/348*290*932/193+432.0*964-390.0*592*870/986+445.0*957/330/272-276.0*93*224-440.0/274*342*667/14-284.0+96.0*100+300.0/579/513-434.0/841-215.0*89+244.0/332*714/761+431.0-273.0*419/362/911*282+69.0*884*430*114+84.0+378.0/448-429.0/309/934+164.0+414.0+286.0*484*124/489-394.0*427/398/895+424.0/16/363/779+451.0/833+450.0*426/838-25.0",
				"-8.825143359906532E10", true));
	}

	public void testAllOperACExpressionWithoutBrackets4() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(o, "-486.0*156/340/431+192.0",
				"191.48262590418997", true));
	}

	public void testAllOperACExpressionWithoutBrackets5() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-478.0/754/351/105/881-2.0*317*460/306-265.0-127.0-218.0+14.0/292/415/526+46.0/193/262/397+468.0*182-309.0+227.0+27.0*564/366-293.0+165.0*286*359*39-33.0+219.0/724+197.0*270/65+340.0/167-169.0/113+466.0/418*374*915/138+352.0*921/883-351.0*379/106*625-241.0*640+438.0/12*980*171*796+87.0*4/593/878+359.0/561/206+269.0*235/132+425.0-203.0/378/224+303.0-210.0+369.0/289*842*275/616-111.0/878/605/610+17.0*195/224*199/217-131.0*72-265.0+217.0*323/324-438.0/629*831/435+288.0/692+431.0/431+447.0/829/531/109*483-342.0*417/427+71.0/543-172.0-63.0*146*786*583-432.0/627+96.0*793*261+203.0-378.0*590*406*238*497-439.0-360.0-498.0/632*442-146.0/219-137.0*378-351.0*116/920-197.0/136/465*398/248+86.0-133.0*667-82.0*237/194*401*50-147.0*954-474.0+446.0*597/492-426.0/773*132+23.0*942*517/529/19-334.0*765*657*483*609+480.0-91.0+420.0/892/391*635*140+33.0/174*535/211/420+344.0/658-172.0/153/291*602-142.0/284*370*31-5.0+467.0-83.0*298/549/934/868+454.0+437.0*692-198.0+347.0*1/65*402+414.0*301*398+333.0/327*102/822/232-11.0/469*574*118/180-43.0/941/267*386-436.0/652*957/712/897",
				"-6.008743451037726E13", true));
	}

	public void testAllOperACExpressionWithoutBrackets6() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-85.0/716/396+278.0-416.0/350+149.0*428+437.0/760/750-28.0/642+375.0/735*748+169.0+40.0*593/609/417*865+47.0/930*503*617*490-120.0+29.0/210*922+316.0*146+208.0*89/69*277*691+407.0*270/987/639/357+281.0/815*183*648+243.0-269.0/190+436.0*878*764+50.0/297*99*871+281.0*930/699/211+160.0-29.0/354/823+483.0*753+165.0-90.0+17.0/327/151*679/103+420.0/561/441*934+359.0/92*997-58.0/880*831*44+491.0/514+421.0/520",
				"3.52035114403136E8", true));
	}

	public void testAllOperACExpressionWithoutBrackets7() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-247.0/451/109+372.0*393/154-263.0+210.0+488.0-253.0/697*793-245.0*276/284/199*986+458.0+259.0/715/680*87*68-130.0/623-368.0/89/635-19.0/638/543/57-98.0*500/543+80.0-160.0*254*948/861-363.0+70.0/924/601+433.0-348.0-26.0+447.0/190/739-410.0*328/273*876-138.0-469.0*989*435*229+335.0-373.0-135.0*843*799*53-285.0*507-167.0/163/925/985/229+268.0*778*858*297/695-244.0/196/507*428-65.0*626*764+20.0*652*790/589-485.0*80/829/178*881+273.0*990*377*255*985-412.0*600/992-333.0-353.0/521/647*18*779-394.0/146+444.0*355+66.0*443*943/463/105-473.0*670-90.0/331*812*796-497.0/550+251.0+368.0*840*631*107-389.0*69-491.0/418*321+192.0*585*167+268.0/447/672*923*225-229.0+10.0/259/258*279+483.0/602*418-145.0/998*893-160.0+358.0/194*50-9.0+89.0/849/79*831-290.0*641*49+407.0/27/285-37.0/421/471+209.0*880-166.0/22/903-478.0*179/899-83.0-417.0-56.0*350/340*360+359.0/231*638*193*381-450.0-365.0-392.0/967/539/350-395.0/549*300*358+85.0*144/545/320+429.0/92/883-257.0/430*10/697/616+158.0-342.0*495*278-247.0/314-198.0*810/206*333*339-253.0*556/198-430.0*492*294*318*645+94.0/928/728/239-44.0-404.0*273/110*252/994-462.0*827*749/642*803-35.0/605/520+88.0*530*487*160/366+489.0-467.0/588/666/655-376.0/404+7.0*284*779/390+6.0*224*953*142/440-192.0*617*854/67-218.0+106.0-402.0+67.0/687*303-209.0/480*773/187-346.0*770*424+352.0*381/165*537/270+421.0/199/651+134.0*364*260/716+180.0-20.0*585/610/210+400.0/884/55+353.0/849*878/621+410.0/373*392/266/96-240.0/601/381*914/743+25.0*830-337.0/440/351*73*136-1.0-207.0/995*786/951/524",
				"1.2804483400316629E13", true));
	}

	public void testAllOperACExpressionWithoutBrackets8() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-157.0*928*627+382.0*951/666/997-433.0/517*313/61-121.0*502+321.0/614/694/178/592-344.0/303*271/951*939-182.0*761-56.0-203.0+113.0-297.0/616/859+303.0/470-2.0*868*763-48.0*853/885/903*482-38.0*961-85.0+405.0/546+295.0/34/339*168/362+406.0/102/553*262-153.0*182/262",
				"-9.291238823174953E7", true));
	}

	public void testAllOperACExpressionWithoutBrackets9() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"+362.0*91/251*788+111.0*122/125*723-144.0/449*977/294+154.0/683-88.0-172.0-59.0*766*486*712*48-216.0*719*276*12-369.0*997/777/738+96.0/107-19.0/38*707/236+53.0*211*240*862/942+396.0/349-24.0*693/325*646/43+78.0*830/864/211-10.0+70.0+153.0/958/875/141-305.0/260/278/475-249.0*661*933+466.0*559+89.0/998/558+354.0-364.0-350.0*616/757*646-481.0*566*208*22-485.0+272.0/341*136+106.0+433.0/642+358.0/211-236.0+85.0*298*304*605-250.0*730+350.0+192.0+463.0*623+445.0*76/194*629*373-409.0*263/588/321-291.0-423.0+213.0/270*521/213-325.0+485.0+340.0*242+229.0*932*890*624+3.0/951/505+94.0-240.0/472/27+411.0*560/268*388/277-151.0*147*635+96.0+92.0/615+339.0+234.0/977+275.0*756+436.0*795/778/351-78.0/373+64.0/989/907*134-301.0*440-369.0/786/119*9-460.0/58/663*742/288-466.0/177*709/902-376.0/74/399/937/449-424.0/254/351*336-138.0/630*759/221/369+438.0/737*381+286.0-46.0/369/395/72*325+258.0/227*550/210-296.0/858/977/414*234+466.0*362-435.0/880/613+30.0*949/25+100.0/609/831-486.0/953/494+246.0+249.0+454.0*972",
				"-6.293466324285099E11", true));
	}

	public void testAllOperACExpressionWithoutBrackets10() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"+412.0*862*178*603/101-327.0/678*240*766+280.0*985/721+397.0/169*582+464.0/461-71.0*366+238.0/345*992*806-113.0*424+21.0*164/10*517+15.0/872+492.0+305.0*737*717+420.0/157+283.0/391/581*551/239-472.0+14.0-41.0/300*892*210*321-235.0/98*160*862/377-278.0/49*513+329.0*667/732*901-418.0*533/177-27.0*452-316.0*259*472*50/885+328.0+190.0/977*199/781/747+480.0/167*804*629-187.0-245.0-413.0+61.0/95/220/484-53.0*912*795*920+478.0/593/638*246+497.0*759/359/135-208.0*258-331.0*1/784/268/988-38.0+412.0*40/376/356-203.0/885+273.0-53.0*260/777*707/949+485.0/912+310.0/247*14*876+382.0/418*806-337.0*551*574/121-391.0*811-197.0/97/295*315-15.0*640/457*902/891+63.0*113*126*652-364.0*56*96-335.0/89*47*761/153+493.0/475/483+309.0-187.0/969-410.0*991/615-245.0*275-252.0*0/652*468/942+39.0/110*10*289*302-465.0-329.0/195/88*28/154+367.0-394.0/560+267.0/421/174*359/206+484.0*507+232.0*562*235*801/550+89.0/190+441.0-221.0/654*20-136.0*673/147*165/560+120.0/915*380*727*92+254.0*799*408/473-353.0-36.0-72.0-222.0/318+374.0/177-29.0*295*418+466.0*265*59*42/847-118.0/346*164*198+469.0*531/72/370*555-438.0/800/386/481-439.0/307/471*731/46+149.0*524*564*380*546+397.0/436*605-422.0",
				"9.102158138785197E12", true));
	}

	public void testAllOperACExpressionWITHBrackets1() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(-6.0*11)*(-11.0+6.0))/((-1.0-23.0*32/36-6.0*40)/(-23.0-22.0*42/26-18.0)))+(-((-17.0/24*47-5.0*24)-(-21.0+23.0))-(-(-23.0*46-16.0/46/16)/(+3.0+16.0/14-11.0)))",
				"406.1947614936647", true));
	}

	public void testAllOperACExpressionWITHBrackets2() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(-21.0/18)/(-2.0*38*48))*((-20.0*5/38)+(+11.0*12*29)))/((-(-14.0-2.0/22*47+17.0/2*0)*(+6.0*12))+(-(-7.0*38+18.0/29-17.0)*(+7.0*46/38+0.0+9.0/47/29)))",
				"-3.297288133021053E-4", true));
	}

	public void testAllOperACExpressionWITHBrackets3() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((-25.0/31*31+13.0/17*18+18.0)-(-24.0/21))/((-5.0)/(+16.0/28/36+4.0*45-8.0)))-(-(-(+15.0*29-22.0+24.0*30)-(-10.0-12.0+12.0/24))/(-(-17.0*4+2.0*38*3)-(-4.0*7*14-7.0/2)))",
				"267.3255262189801", true));
	}

	public void testAllOperACExpressionWITHBrackets4() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(-2.0*12*36)/(-10.0+14.0/23-18.0/40/43))/(-(-5.0/46/45+15.0/25/27+4.0*16*28)-(+2.0*30+23.0/19/37)))-((-(+8.0/26-17.0-14.0*30/25)+(-18.0+9.0/7/44))+(-(-25.0/8*30-16.0/46+23.0)-(-10.0-10.0/41*12-3.0*26)))",
				"-177.59580315104577", true));
	}

	public void testAllOperACExpressionWITHBrackets5() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((-25.0+18.0)/(-19.0+19.0/37*2-17.0*26))*((-10.0-13.0+16.0)-(-18.0*40)))-(((+0.0/42*11+11.0)+(+20.0/1+4.0*8+12.0/33/6))/((-17.0/48*19)*(-16.0*27*44-20.0-4.0)))",
				"-10.851129916399167", true));
	}

	public void testAllOperACExpressionWITHBrackets6() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(-19.0*43*18-15.0/23)/(+8.0))/(-(-23.0/21*43)*(+12.0+9.0*35+2.0/39)))*(-(-(-4.0/48*7)+(+8.0/5/10))/((+21.0/47*7)-(-6.0/16/14+4.0/9/8-24.0/25*1)))",
				"0.02185784472710073", true));
	}

	public void testAllOperACExpressionWITHBrackets7() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((+17.0)/(-12.0/11*47))-(-(-7.0+7.0*4+20.0)/(-24.0)))+(-(-(-15.0/33/32)+(+17.0*22+0.0*5*14+13.0/18))+((+14.0/3*11-1.0)-(-6.0+4.0*23/10-4.0*33)))",
				"-194.22632038469806", true));
	}

	public void testAllOperACExpressionWITHBrackets8() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+19.0/44*6)*(-4.0*30-25.0/21))+(-(+10.0/24/43-9.0*13)-(-15.0*15/39+18.0)))-(-(-(-20.0*21*24+3.0/13-6.0/10*49)+(+7.0/18*14-17.0+10.0*4/4))+(-(+22.0/5+24.0/2/2)/(-18.0/32+8.0/26/4)))",
				"9667.44280609124", true));
	}

	public void testAllOperACExpressionWITHBrackets9() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+16.0+4.0-22.0)+(+24.0))*((+18.0-14.0/29)-(-19.0*28*27+0.0*12/17)))+((-(+0.0/37)-(-6.0/30))*(-(+1.0+1.0/31)/(-25.0/47*43+16.0*11/32)))",
				"-316393.3674264185", true));
	}

	public void testAllOperACExpressionWITHBrackets10() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+18.0/22*21)/(-6.0))*(-(+12.0+6.0/41-19.0/7)/(+18.0+23.0*44*19)))*(-((-21.0+22.0*28)-(-14.0-20.0/11/13))/((-12.0*12+14.0*22*21)/(+24.0/13/49-4.0*28-17.0*49)))",
				"-0.12773896626917736", true));
	}

	public void testAllOperACExpressionWITHBrackets11() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+19.0/6*45-7.0*45-15.0)+(-5.0/27/29))-(-(+4.0/7/39-21.0*24-8.0*3*38)-(+11.0*25)))-((-(+10.0*31/10-17.0/23)+(+16.0*30+5.0*11/26+0.0/16*13))/(-(-18.0*47-4.0-15.0)*(+5.0*43/5)))",
				"1328.4795854218094", true));
	}

	public void testAllOperACExpressionWITHBrackets12() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+15.0*11*36-20.0/43-11.0)+(+11.0))*(-(+10.0*22/6+12.0)-(-22.0*5*3-12.0+10.0)))+(-((-11.0/36/43-16.0/49*25)*(-17.0+24.0+8.0/44))-((+2.0-17.0)+(+19.0*23+24.0-6.0/33)))",
				"1676247.7436599024", true));
	}

	public void testAllOperACExpressionWITHBrackets13() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((-13.0/24)/(+4.0*8*28))*(-(+11.0*12*45)-(-1.0/2*39+15.0*29+8.0*23)))*(-(-(+24.0/36*8)+(-2.0+12.0-24.0))/((+8.0/29*48+1.0*18/18)*(-16.0)))",
				"-0.33543111627485556", true));
	}

	public void testAllOperACExpressionWITHBrackets14() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((+23.0*15/41)*(+2.0*39*32+0.0/46*44+8.0*22*14))+((+0.0/25/45-24.0*15-24.0)-(-9.0*27/34)))+(-(-(+1.0)*(-8.0*0/49-11.0/17*8-21.0/45*30))/((-22.0*14)*(-2.0/11*46+21.0*6)))",
				"42113.43883629902", true));
	}

	public void testAllOperACExpressionWITHBrackets15() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((-17.0+16.0*17/34)/(-12.0/28/26-11.0))*(-(+0.0/28)+(+8.0*38*38-7.0/28)))+(-((+3.0/29/29)*(-6.0/26+2.0))*((+14.0+6.0-11.0)+(-7.0*16+19.0/21*14)))",
				"-9436.719916092874", true));
	}

	public void testAllOperACExpressionWITHBrackets16() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(-7.0/15)-(+4.0-13.0-12.0*5/6))+((+19.0*8-2.0/6+16.0)*(-8.0*16+21.0)))+(((+20.0*3+10.0/14)+(-3.0/41*48-18.0/6*20))*(-(+12.0*48)/(-11.0+12.0*12/12)))",
				"19532.462485481996", true));
	}

	public void testAllOperACExpressionWITHBrackets17() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((+9.0/17-20.0)*(-15.0+2.0+18.0*30*33))-(-(-17.0)+(-9.0/31/41+11.0)))-(-(-(-7.0+1.0*29)*(+21.0-24.0-23.0*10))*((+8.0+8.0-22.0)-(+24.0*48/22+18.0*9+17.0)))",
				"-1563410.771786921", true));
	}

	public void testAllOperACExpressionWITHBrackets18() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((+7.0*0/6)-(+15.0+14.0*43-16.0))*(-(+22.0-7.0-23.0*21*22)/(+2.0*29)))*(((-5.0+12.0+9.0/44/1)/(-9.0*20*0+16.0+12.0*19))/(-(-7.0*17+12.0/26-20.0/34*33)-(-24.0*35/12+2.0/35*45)))",
				"-15.807527473191879", true));
	}

	public void testAllOperACExpressionWITHBrackets19() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(+22.0/47/38-10.0/7/43)*(-21.0*25/6-10.0+23.0*43))-((+19.0/2-14.0+7.0*21*44)+(+15.0/7*48+11.0)))*(((-22.0+2.0*42-25.0*3)-(-15.0*13))-(-(+6.0)*(-19.0*28/1)))",
				"-1.9853940615901455E7", true));
	}

	public void testAllOperACExpressionWITHBrackets20() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(-12.0/27/20)*(-17.0*36*21-8.0*5-9.0*5*15))-((-6.0*33/6+7.0/23+2.0*9)/(+12.0*25/10)))*(-((-2.0/23/22+7.0*19/14+12.0*47)-(-8.0/11/44+1.0))-(-(+17.0*0/4+8.0/11+3.0/31)/(-24.0+19.0/28/24)))",
				"-172336.0794093065", true));
	}

	public void testAllOperACExpressionWITHBrackets21() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((-5.0-2.0+18.0*26/33)-(+23.0))-((-4.0/3+15.0)+(-5.0*43/29)))*(((-4.0/23-21.0/48+24.0*18)/(+14.0*48*14))+((+17.0*2-9.0/24)*(+19.0*26*33)))",
				"-5243269.593774116", true));
	}

	public void testAllOperACExpressionWITHBrackets22() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(-2.0/6)-(+13.0))+(-(+9.0/43+6.0/18+22.0)+(-7.0-21.0)))/(-((-7.0+17.0+0.0)*(+1.0*5+10.0*38+21.0*0/13))*((-24.0*34/32+2.0*28*7-16.0/4/22)-(+22.0/37/5+18.0)))",
				"2.8253689976382095E-5", true));
	}

	public void testAllOperACExpressionWITHBrackets23() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(+22.0-25.0/19-12.0)*(+10.0*36-6.0))/(-(-18.0/24-22.0)/(+8.0)))/(-(-(-24.0/46*18)+(+5.0*30/8))/((+12.0*5)*(+12.0/2*41+9.0*6+10.0)))",
				"-714514.2792805168", true));
	}

	public void testAllOperACExpressionWITHBrackets24() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+20.0-25.0*34)/(+8.0-5.0*27))/(-(+13.0)-(-16.0+5.0*35)))*(-((-21.0*19/3)-(+18.0/4*39))+((+1.0/30*31)-(-7.0/1)))",
				"-12.027223341268389", true));
	}

	public void testAllOperACExpressionWITHBrackets25() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+10.0)/(+9.0))+((-4.0/29-7.0*19)+(-12.0*34*22+16.0)))/(((-14.0/7*9-14.0-20.0*4*2)-(+23.0*24))+((+17.0+10.0+10.0*17/40)+(-1.0*36+12.0*48/22+24.0*10)))",
				"18.84091650151313", true));
	}

	public void testAllOperACExpressionWITHBrackets26() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((-13.0/31/39-8.0)+(+14.0*37*15+17.0*27-2.0/31*42))/((+7.0+8.0/45/42)+(+17.0)))/(-((+3.0-11.0/39)-(-11.0))/((-7.0*22+23.0/27/8)+(+22.0-23.0/2)))",
				"3578.76702697166", true));
	}

	public void testAllOperACExpressionWITHBrackets27() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((-6.0/29-18.0/21/36-11.0/1*1)+(-12.0+1.0*40/30+14.0*40))*((+8.0/7/16)-(-13.0*0-5.0/24/48+17.0*13/36)))-(-((-20.0/2/24+10.0/16-4.0*38)*(-16.0/44-17.0*34-5.0))+(-(+12.0/7+14.0*23/33)-(+10.0/48-8.0-14.0/5)))",
				"85288.03800843624", true));
	}

	public void testAllOperACExpressionWITHBrackets28() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+17.0/41)/(-20.0+8.0/9*41+13.0/36*48))+(-(+20.0-7.0/33*22+5.0)-(-24.0/17-14.0/2/45)))/(-((+1.0*26/34-4.0)*(-3.0*25*35-16.0))*(-(+4.0*40*28-16.0)-(+4.0*6*14)))",
				"-4.572612836347264E-7", true));
	}

	public void testAllOperACExpressionWITHBrackets29() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(-9.0*6+7.0*41/33)*(-11.0/5))-((-10.0/23-17.0*39*47)*(+11.0*46+11.0/29/29)))*(((+3.0*3)*(+22.0/25/38-17.0/38*6))/((-19.0+15.0*37+8.0*48)/(-24.0*29/29-20.0/32)))",
				"-1.0107897499431774E7", true));
	}

	public void testAllOperACExpressionWITHBrackets30() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(+9.0/36/36)*(-24.0/11))/((+22.0/31+18.0+22.0)*(-9.0*17-20.0*2)))/((-(+20.0*26/22-6.0/24)-(+23.0*10-25.0/11-24.0*44/4))/((+14.0/22*6)-(-2.0*11/40-18.0/42/6+11.0*36)))",
				"5.8596201520990026E-5", true));
	}

	public void testAllOperACExpressionWITHBrackets31() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(-17.0/48)+(+7.0*46-21.0*31))/((-8.0/18+3.0-8.0*23)/(+4.0*23)))-(-((+6.0+8.0*41+2.0)*(-18.0))-((-7.0-9.0)-(+2.0/17-4.0+15.0)))",
				"-5908.480323115162", true));
	}

	public void testAllOperACExpressionWITHBrackets32() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+2.0/28*32)*(-1.0*0/9-23.0))-(-(-24.0-12.0/18/13)*(-4.0*27/20)))/(-(-(+1.0/47+23.0*4-12.0/14)+(-16.0+2.0*3-11.0))/(-(+12.0*6/19+11.0+14.0)/(-12.0/17/36)))",
				"-1011.952802575681", true));
	}

	public void testAllOperACExpressionWITHBrackets33() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(-16.0)*(-23.0))*(-(+16.0*30/9-13.0)+(-8.0/4/26)))/(((+20.0/48)*(-9.0*2))/((+20.0*46*11-18.0/34*32)-(-16.0/3*40+9.0*22*13)))",
				"-1.535158869891068E7", true));
	}

	public void testAllOperACExpressionWITHBrackets34() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+20.0/38)*(+17.0-21.0/12+22.0*39/44))+((+14.0/40*45)-(-22.0/36-16.0*45-23.0)))/(-(-(+3.0*26)*(+13.0*1*12-12.0/21*13-18.0*49*21))+((-18.0/35)-(-6.0/37)))",
				"-5.426247367964689E-4", true));
	}

	public void testAllOperACExpressionWITHBrackets35() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+14.0+15.0*24)*(+19.0*30/37))*((+22.0+16.0)-(-11.0/13*6-10.0*30*18)))-((-(+17.0*37*44)/(-14.0*31))*((-9.0)/(-8.0/4/40)))",
				"-3.137242821349531E7", true));
	}

	public void testAllOperACExpressionWITHBrackets36() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((-16.0-9.0+14.0)*(+0.0/18/33-9.0/34))-(-(-22.0-16.0)/(-24.0-2.0-23.0/27/27)))-(-((-11.0-15.0*28*15-25.0/40*40)-(+22.0+13.0/10))-(-(+15.0*7)+(-5.0+12.0/23+22.0*4)))",
				"-6379.3262632501555", true));
	}

	public void testAllOperACExpressionWITHBrackets37() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+0.0/28/38+2.0/24*47)*(-1.0/31-7.0/41*5-24.0))/(-(+11.0*32*13)/(+12.0+17.0)))+(-((+16.0/40+4.0+13.0)+(+2.0/31/15-22.0))-(-(+12.0-1.0*13/13+3.0*47)*(+12.0/3)))",
				"611.9779923336891", true));
	}

	public void testAllOperACExpressionWITHBrackets38() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+20.0+5.0*47*19)+(+8.0*33-13.0*33*25+23.0))*((+22.0/19+11.0/14/43-1.0/1)+(+23.0/28+21.0-24.0*6/34)))+(((+11.0+23.0*11*17-2.0*5*30)+(+8.0-8.0-15.0/21))/(-(-5.0*37-11.0-1.0/39/22)/(+6.0/31*32-16.0*14/15+10.0)))",
				"105764.77260389556", true));
	}

	public void testAllOperACExpressionWITHBrackets39() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(+12.0-7.0*47)+(+11.0*35*17+10.0*32/13))/(-(-16.0/9+0.0-14.0/30/21)-(-7.0*42-18.0)))+(((+7.0/46/2-19.0-2.0*37*17)-(-12.0*38-10.0*12*42))-((-6.0*24+23.0+14.0/44/33)/(+10.0/15*16+5.0*41*47+3.0)))",
				"4241.034500943347", true));
	}

	public void testAllOperACExpressionWITHBrackets40() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(-8.0*10+5.0)/(+12.0))/((+0.0+21.0/44)/(+1.0/42)))/(-(-(-5.0-5.0*35/23)+(+3.0-2.0*8/35-16.0/24))+(-(+23.0/24+22.0*33)-(+5.0*20/49+16.0*0+4.0/31)))",
				"4.1929250119168753E-4", true));
	}

	public void testAllOperACExpressionWITHBrackets41() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(-9.0*7/35+2.0*17-12.0)/(+7.0+5.0/32-9.0/7))+(-(-23.0/10-8.0*10)+(+3.0/8-8.0+15.0*43)))+(-((+22.0*3/13-22.0/32-21.0/26)+(-20.0*19))+(-(+14.0/39*32)/(+6.0/27+3.0*13)))",
				"1092.3594824186948", true));
	}

	public void testAllOperACExpressionWITHBrackets42() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+1.0*41)*(-1.0*14-4.0-7.0*43/23))/((-14.0+14.0/18*29)*(+13.0/9)))/(-((+17.0)-(-25.0/24))/((-24.0/7*1-25.0*7/8+22.0)+(+20.0/11-19.0)))",
				"117.10638571762034", true));
	}

	public void testAllOperACExpressionWITHBrackets43() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(-21.0*19+11.0*32/46-25.0*39)-(-22.0+12.0/31*14))*((-23.0/43*39+19.0/17)+(-5.0+10.0/41*0)))+(-(-(-9.0*13)*(-22.0*9))/((-9.0*22+2.0*40*22)+(-20.0/25-25.0/3/9)))",
				"-34202.70015908658", true));
	}

	public void testAllOperACExpressionWITHBrackets44() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((+10.0/2+0.0*18*39+18.0)-(-4.0))/((+0.0+6.0)/(-13.0*19+19.0)))*(-((+17.0/19-10.0*18)/(+4.0/46/36-11.0))/(-(-5.0*5)/(-3.0)))",
				"2005.1166615418401", true));
	}

	public void testAllOperACExpressionWITHBrackets45() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+19.0*35+9.0*39*39+19.0/20*12)+(+3.0-25.0/19*44))*((+17.0)*(+7.0/34+1.0/33*4+11.0/46)))/(-(-(-14.0*24/10+1.0*12/39-17.0/41/33)/(+12.0*31/8+20.0*48))*(-(-18.0+4.0/49)/(-4.0*4-1.0/16+13.0*27)))",
				"7.841215200284415E7", true));
	}

	public void testAllOperACExpressionWITHBrackets46() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((-7.0*3*27-14.0*42+13.0*20*49)+(+23.0/28/29))*(-(-16.0+8.0/24+6.0*16)/(-1.0*41*46+15.0*45)))-(((-5.0*13-11.0)/(-2.0*41/28-20.0*31+17.0))-((+15.0/29*6-14.0)-(+3.0/25+5.0)))",
				"-784.6506017729329", true));
	}

	public void testAllOperACExpressionWITHBrackets47() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(-11.0/43)+(-14.0/8*25))*(-(+1.0/13-20.0/48)-(+5.0*28-12.0/14)))*(((-18.0-13.0/43)-(+3.0-10.0/45))/(-(+13.0+22.0/42-18.0/3/49)*(-8.0/36*11+23.0*9/19)))",
				"-1123.783170087531", true));
	}

	public void testAllOperACExpressionWITHBrackets48() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(-11.0-17.0/3/21-18.0)/(-4.0-20.0/43*7-10.0*20*33))+(-(+14.0/10)/(+9.0/9/14-6.0-18.0)))+((-(+13.0/23-11.0/18*44)*(+0.0/48/28+4.0*48/20))+((-3.0+4.0*40)-(-19.0/18*11-1.0)))",
				"422.3812949049041", true));
	}

	public void testAllOperACExpressionWITHBrackets49() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(-4.0*13)-(-7.0/37+2.0/26))-(-(-2.0*48/40+13.0*33+9.0*48)*(+10.0-6.0-25.0)))*(((+11.0*46-14.0)*(+14.0*23-4.0))/(-(+4.0*35*10+17.0/6*4-13.0/22)/(-20.0/23/5-5.0*32/12-10.0/44*36)))",
				"-4.3245256319232084E7", true));
	}

	public void testAllOperACExpressionWITHBrackets50() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((+16.0*36-5.0/4/38-3.0/14)*(+20.0*39/44))*(-(+3.0*47-4.0*43-25.0/37)-(+4.0*10+24.0*16/26)))+(-((+8.0/25*39-17.0*3*2-16.0/21*47)/(-6.0+14.0-14.0*31))/(-(+16.0-21.0)*(+10.0*33/21+12.0/5*34)))",
				"-235705.00009661366", true));
	}

	public void testAllOperACExpressionWITHBrackets51() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((-20.0*38-5.0/18*39+23.0*10)-(+16.0*5))/((+15.0-2.0/36*39)-(+17.0-23.0/45/18)))/(-(-(+11.0*14/49-18.0*30)/(-19.0/47*33))-(-(+15.0-21.0/24)*(-19.0)))",
				"0.6576118025542591", true));
	}

	public void testAllOperACExpressionWITHBrackets52() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(-4.0*13/9+7.0/8+17.0)/(+2.0))-((-13.0)-(+21.0)))-(-(-(+17.0/9)+(-9.0-24.0))-(-(+22.0*34-20.0*41*0)*(-25.0)))",
				"18705.15972222222", true));
	}

	public void testAllOperACExpressionWITHBrackets53() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+24.0*12+15.0/19*7+1.0*30/39)-(+12.0*30*27-21.0/33*1+19.0*19))/((+15.0)/(-12.0/2)))/(-(-(+11.0/22*15)-(-12.0+21.0*42))-((+7.0+12.0)+(-3.0*16*40+12.0*19+2.0)))",
				"-1.5359730178230226", true));
	}

	public void testAllOperACExpressionWITHBrackets54() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((-25.0*1+23.0-24.0/2/36)/(-2.0/18))/(-(+3.0*13)+(+6.0+23.0/14/17)))*((-(+10.0/48/15-11.0*40+5.0*34*7)/(+18.0))-((+13.0*12-20.0*12)*(-23.0/4-1.0*49+15.0/25)))",
				"2929.6586204164837", true));
	}

	public void testAllOperACExpressionWITHBrackets55() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((-24.0/38)+(+15.0*13*23-3.0/13+0.0))/((-14.0*1*43+12.0/9*24-11.0*16*14)*(-6.0/41)))+(-((+3.0*12+6.0*21/8)/(+8.0+7.0))*(-(-8.0*13/12+21.0/12/49+12.0*26*24)-(+14.0-14.0/24)))",
				"25860.21012341144", true));
	}

	public void testAllOperACExpressionWITHBrackets56() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(-11.0*17-14.0*32)-(+0.0+10.0/28+6.0/15*3))*(-(-6.0*24*8)/(-18.0/44+7.0*19)))+(((-5.0-1.0+5.0/36)+(+2.0*2/33))-(-(+18.0/4*44)-(+21.0)))",
				"-5290.331181618823", true));
	}

	public void testAllOperACExpressionWITHBrackets57() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+7.0-2.0/44/5-3.0*19*19)+(+14.0*47/31))*(-(+5.0)-(-12.0+22.0)))/(((+8.0*9-3.0*4)*(+11.0*32-5.0*29*25-6.0))-(-(-7.0+12.0/19/12)-(-12.0/27*25)))",
				"-0.08364853560558315", true));
	}

	public void testAllOperACExpressionWITHBrackets58() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(+16.0-6.0)*(-13.0+8.0-4.0/1))/((+12.0*29/5-6.0-3.0*25)/(+10.0*48-20.0*49-23.0)))+(((+13.0/25/35-23.0/13)*(+7.0*38/37+11.0*45*36+9.0))*((-1.0/31+7.0*22*30-20.0)-(+18.0*31/23)))",
				"-1.4318412801247525E8", true));
	}

	public void testAllOperACExpressionWITHBrackets59() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(+1.0*16+20.0*43/12)*(+11.0))+(-(-15.0/44+18.0+24.0)-(-1.0/42)))/((-(+2.0/6)-(-7.0/15/13-5.0/45-2.0/41*17))+((+6.0*33/10)*(-11.0/15*30+10.0)))",
				"3.8939462939049894", true));
	}

	public void testAllOperACExpressionWITHBrackets60() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+24.0+20.0+8.0*44*46)+(-25.0/41*35+5.0*29/12))-(-(-8.0+20.0*19)+(+10.0/11)))/(-((+4.0+1.0*40/34-22.0/13)+(+7.0/21*8))+(-(+16.0*38*9-19.0/32/36)+(+1.0/22*23+8.0/2)))",
				"-2.9004036958561152", true));
	}

	public void testAllOperACExpressionWITHBrackets61() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((-8.0)*(+6.0/23))+((+13.0*37)-(+14.0*3-1.0*39-21.0)))/(((+13.0+16.0*4)+(-22.0/48*32))-(-(+2.0+7.0+8.0/15)/(-9.0*19)))",
				"-8.046024486223164", true));
	}

	public void testAllOperACExpressionWITHBrackets62() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(+5.0/48-13.0/7/39+10.0*18)+(-10.0*6*39))/(-(+3.0*7/20-19.0*1-3.0*24)/(+15.0/13+8.0*11/47+19.0*19)))-(-(-(-7.0*19/26)*(+19.0*23/26+8.0+15.0/32*36))-((+12.0+9.0*48+21.0)+(+10.0*15+5.0/18*48)))",
				"-9357.071512447996", true));
	}

	public void testAllOperACExpressionWITHBrackets63() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((+3.0*33+16.0/27-16.0*34/6)+(+6.0/29))-(-(+20.0/28/45-6.0*16/38-8.0/1/29)/(-12.0-9.0*31/12)))+(((+18.0*43-9.0*12*4-21.0)-(-17.0-12.0*37/12+10.0*44/34))/(-(+0.0/25+6.0/37/45-21.0*29)+(-6.0*8+13.0*22/33)))",
				"-8.418211755663535", true));
	}

	public void testAllOperACExpressionWITHBrackets64() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((-10.0)/(-10.0*31-23.0*4*21-5.0*17))-((-21.0)/(-8.0*37)))+((-(-9.0/22+14.0)-(+14.0*23+14.0*22+13.0))/(-(+6.0+8.0-15.0/47/17)-(+16.0)))",
				"21.96671687724614", true));
	}

	public void testAllOperACExpressionWITHBrackets65() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(-6.0)/(-11.0/47-17.0/43*4-1.0*14*26))*((-6.0/43-14.0/1-12.0*29*44)*(+15.0*32)))-(-((-16.0/44/37-10.0*35/45-17.0*12)*(-11.0*19*16))-(-(+4.0+12.0-22.0/32)/(+16.0/11*15-7.0*22)))",
				"587557.8938637477", true));
	}

	public void testAllOperACExpressionWITHBrackets66() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+15.0/49/4+0.0/3)/(-25.0+5.0/38/47))*(-(+20.0/7/31+9.0/7-1.0)+(-3.0/41/25+3.0)))+(-(-(-9.0*23-10.0*19+17.0*46*6)+(-18.0*1/24))+(-(-4.0*19-16.0*27-25.0/1*39)/(-20.0/46-8.0/23*17)))",
				"4062.118693493088", true));
	}

	public void testAllOperACExpressionWITHBrackets67() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(+20.0/12/8-7.0*20/38)/(+13.0/47-21.0*46-17.0*6*49))/((-25.0+13.0*40)/(+7.0/5/15+23.0*28*27)))/(-(-(-21.0-8.0+15.0)/(+2.0-9.0-11.0*13*7))*(-(+8.0*16+21.0*13)-(+14.0+0.0)))",
				"-0.0035520420182547302", true));
	}

	public void testAllOperACExpressionWITHBrackets68() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(-12.0+0.0/12)+(-5.0*42/46))+((+8.0+1.0/48/14+0.0*7)/(+14.0/9-20.0*7*0)))*(-(-(+23.0*36/8+17.0*5)+(+4.0*38))+((-21.0)-(+12.0*10+5.0-3.0*26)))",
				"72.16551824534164", true));
	}

	public void testAllOperACExpressionWITHBrackets69() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(-23.0*35)+(-8.0/3*41-20.0/25/13+7.0/22))/((+8.0+22.0/13)+(+8.0*6*27+2.0*34-7.0/2)))+(((-7.0)-(-24.0))/(-(-23.0/28)/(+8.0*30/17-22.0*23/15-10.0)))",
				"-612.4080401044773", true));
	}

	public void testAllOperACExpressionWITHBrackets70() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(-13.0*5*30-6.0/12)+(-11.0-2.0*37*9-18.0/18*34))+(-(+8.0)+(+6.0-1.0/23+19.0/45/32)))-(-(-(-3.0*24-8.0+5.0/13)-(-9.0*35-15.0*34))/((-2.0/35*16+17.0/1*29+7.0)-(-12.0*44*42+9.0-16.0)))",
				"-1241.49040144423", true));
	}

	public void testAllOperACExpressionWITHBrackets71() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(+19.0*43*34)/(-15.0*48/9))*(-(-17.0/16/39)*(-12.0-7.0*7/17)))-((-(-21.0*8-25.0/21-13.0/42*12)+(+4.0*25*18-1.0*29*14-22.0/21/23))+((+24.0/19/2)-(+12.0*13+24.0/41-17.0/44*45)))",
				"-1287.5098588908475", true));
	}

	public void testAllOperACExpressionWITHBrackets72() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+11.0/19/15+17.0)/(-21.0/29/15-15.0-8.0/13))*((-1.0/46+23.0*29*5)*(+21.0*31+5.0*39*49+13.0*12)))+((-(+11.0+18.0*7/24)*(+21.0/14/7-8.0))/((+18.0/8-25.0+22.0*22/11)/(+11.0-19.0/16+24.0/45)))",
				"3.759047937222214E7", true));
	}

	public void testAllOperACExpressionWITHBrackets73() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((-11.0/48-18.0-16.0*33*3)/(+23.0*22*27))-((+6.0/39*45)+(+2.0+8.0/1)))+((-(-8.0*28*2+11.0-12.0)/(-4.0*29+23.0/16))+((-8.0)+(+7.0*26*8+17.0*13/17)))",
				"1440.0403887039429", true));
	}

	public void testAllOperACExpressionWITHBrackets74() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+15.0-15.0/39/43+20.0)*(+1.0*32*11+5.0*24-18.0/41))-((+3.0)/(-10.0/38*9-18.0*42)))-((-(-15.0-8.0*26*40)*(+18.0*20/45-15.0/47/49-19.0))+(-(+21.0*5/35-8.0/47)+(+22.0-15.0-11.0/2)))",
				"108241.03787698931", true));
	}

	public void testAllOperACExpressionWITHBrackets75() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+15.0/13*39-18.0)*(-13.0*2-15.0/43))+(-(-5.0*45+14.0/19-8.0)*(-22.0*2/31-17.0/39/35+22.0/44*26)))/(-(-(+0.0+20.0/30-7.0/28)*(-25.0*39+15.0*15*26+19.0/35))-((-25.0/40+15.0/23)/(-16.0/46*7)))",
				"0.9724136136497179", true));
	}

	public void testAllOperACExpressionWITHBrackets76() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(-14.0/24+23.0*4+20.0)*(+18.0*9+20.0*4+8.0*30))-(-(-7.0/40+16.0/13)-(+6.0*40*18)))-((-(-13.0*45)*(+3.0/18))+((+15.0-8.0*31-8.0/23/8)+(+14.0*29*9)))",
				"54505.43258082498", true));
	}

	public void testAllOperACExpressionWITHBrackets77() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+2.0)-(+20.0*45/11-2.0))-(-(+11.0-11.0/19*0-18.0)/(+7.0*43-21.0*15)))-(((+10.0/33/47+15.0)*(-10.0-2.0-16.0*49*28))+((+16.0+2.0*23*18+24.0)/(-11.0+15.0/9/1)))",
				"329617.2936814958", true));
	}

	public void testAllOperACExpressionWITHBrackets78() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+22.0*2+3.0/44)+(-16.0*46+23.0*46+12.0))+(-(-18.0*28*17)+(+20.0*5)))/(-(-(-10.0*42-3.0/35/47)+(-19.0*14))-(-(-23.0/45/16)/(+19.0/8+2.0)))",
				"58.16494185648802", true));
	}

	public void testAllOperACExpressionWITHBrackets79() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(-13.0)-(+14.0*0-23.0/22+21.0*42))-((+5.0-17.0/17+13.0*4*49)/(-16.0-6.0-3.0*16/26)))/((-(-1.0*22-1.0)/(+14.0-19.0/43-10.0/39*38))+(-(-19.0)/(+15.0*12*36)))",
				"-126.13975414017999", true));
	}

	public void testAllOperACExpressionWITHBrackets80() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(-15.0/19*29-25.0/38*48)+(+2.0-25.0/49))-((+19.0*49/36+16.0/39)+(-6.0/6+1.0)))-(-(-(+13.0/43+8.0)-(-10.0))+((+7.0)+(+12.0/11)))",
				"75.84161297795674", true));
	}

	public void testAllOperACExpressionWITHBrackets81() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((-8.0*14/26+20.0/8/11)-(+23.0*45+23.0-21.0))+((-1.0)-(-17.0*0*22+20.0+15.0*0/25)))+((-(+4.0/45/33)+(-2.0))-((+24.0/39)/(-18.0*43*20)))",
				"1018.0777657312542", true));
	}

	public void testAllOperACExpressionWITHBrackets82() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(+14.0*17-18.0*2-5.0/31*37)/(+21.0/8+12.0-22.0/44))+((-11.0*11+19.0/19*48-17.0/24/2)-(-17.0*3-19.0/8*24)))*(-(-(+8.0)-(-8.0+20.0/15+3.0/18))+(-(+19.0/12+24.0/7*6)/(-18.0/12*18+6.0)))",
				"-123.9788403314112", true));
	}

	public void testAllOperACExpressionWITHBrackets83() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(-7.0*43/4)-(+19.0))+(-(+21.0*13+21.0/20/11)*(+23.0/41-21.0)))+(-((-17.0*0+19.0*10/44)/(-25.0*40/28-14.0/38))*((+15.0*35)+(+19.0+8.0*40*7)))",
				"-5192.380699623766", true));
	}

	public void testAllOperACExpressionWITHBrackets84() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((+0.0+16.0)/(-12.0/13*1-18.0/38/21+13.0))*(-(+21.0*2/2)/(+3.0/49+18.0*25)))-(((+21.0/23/45)-(+8.0-21.0+6.0*11/29))/(-(-1.0-22.0-18.0*18/26)-(-5.0/16-17.0*7*40+15.0/45)))",
				"-0.06417371666592869", true));
	}

	public void testAllOperACExpressionWITHBrackets85() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+24.0-20.0*27)+(+11.0*21))-(-(+15.0/36)-(+19.0*22+4.0)))/(((+4.0/43)-(-6.0))-((+2.0*14)+(+10.0)))",
				"-36.650813896987366", true));
	}

	public void testAllOperACExpressionWITHBrackets86() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(-13.0*7/26+7.0)/(-2.0*34-6.0/49))+(-(+2.0+15.0-24.0*27/48)-(-3.0+18.0*33+13.0/34)))*(-(-(+9.0/39/25-2.0*11)-(+13.0/7/4-20.0*15+24.0))*((+24.0)/(-6.0-12.0-22.0*3/2)))",
				"83298.136900379", true));
	}

	public void testAllOperACExpressionWITHBrackets87() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+16.0*48/7)/(+16.0/15*27))+((-12.0/43)/(-18.0*26)))+(-(-(+15.0/8/36)-(-24.0*27))+(-(-25.0+20.0/45/10+8.0)/(-22.0+21.0*6-7.0)))",
				"-651.5832372373025", true));
	}

	public void testAllOperACExpressionWITHBrackets88() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+0.0/35-20.0*43)-(+15.0/6-13.0*5/6+21.0/7))+(-(+24.0/45/34)+(+17.0/22-25.0*31)))*(-(-(-17.0-7.0-1.0*39)/(+12.0/44/29-13.0/38))-((+11.0)/(-4.0*27+22.0*27)))",
				"-308412.2951733379", true));
	}

	public void testAllOperACExpressionWITHBrackets89() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((-2.0*13*15)+(-1.0*32-19.0))+(-(-7.0)-(-8.0/14/17)))/(-((+17.0/42*16)*(-11.0/14))/(-(+10.0*17-21.0/28)+(+6.0+13.0)))",
				"-12814.046909405473", true));
	}

	public void testAllOperACExpressionWITHBrackets90() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((+1.0/37-7.0/39*2)-(+18.0/29+6.0*10/30))+((+7.0-3.0*28/16-8.0*29)/(-14.0/3*40-9.0*0/27-6.0*3*34)))+(((+11.0*28*21)*(+21.0/1))*((-7.0)+(-22.0*37)))",
				"-1.1151478475907002E8", true));
	}

	public void testAllOperACExpressionWITHBrackets91() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((+14.0*42-21.0*19/28)-(+3.0*21+3.0*45))+((+20.0*44*36)/(-6.0)))+(-(-(+12.0/46*10)+(-20.0*3-20.0+15.0/47*3))-(-(-2.0*47)-(+20.0-13.0+16.0*15)))",
				"-5421.098751156337", true));
	}

	public void testAllOperACExpressionWITHBrackets92() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((+4.0/3-15.0+2.0)*(+11.0*40-5.0/39/40+14.0*4))*(-(+13.0*10*32+3.0*18/39)-(-21.0*20*11)))-((-(-20.0)-(-5.0-22.0*10))*((+4.0-1.0/11)+(+0.0+10.0)))",
				"2650429.4826220796", true));
	}

	public void testAllOperACExpressionWITHBrackets93() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+14.0*47*15-24.0/12)/(-2.0/48+17.0/49))*(-(+18.0/17+17.0*21+5.0*9)-(+22.0/46/10-21.0*8*20+17.0*38/10)))+((-(+7.0*39*10-2.0+12.0*43/45)/(-16.0*17*42))+((-10.0*11+5.0-14.0/14/40)-(+6.0+21.0/40*22)))",
				"9.349400947300194E7", true));
	}

	public void testAllOperACExpressionWITHBrackets94() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+14.0-11.0*39*2)+(-6.0+4.0-8.0))*(-(+1.0*0-16.0*48)*(-18.0/27+19.0/33)))*(-(-(+22.0*5*45)-(+18.0*10+19.0*19/13))+((-7.0+11.0/21)+(+14.0)))",
				"3.079791888111885E8", true));
	}

	public void testAllOperACExpressionWITHBrackets95() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+8.0/18*49+23.0+0.0)-(+15.0-11.0*48*36))/(-(+23.0-4.0/32*28)*(-11.0*39+15.0)))-(-((+5.0+17.0/32/25+16.0)*(-15.0*33/39-6.0))*(-(+3.0/19)/(-11.0*26/23+12.0-23.0*16)))",
				"-2.52659834140962", true));
	}

	public void testAllOperACExpressionWITHBrackets96() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+18.0+15.0)+(+12.0*21/27))-((-17.0*14-10.0/15/7)-(-14.0*31-19.0-12.0/48/18)))*(-(-(-15.0*31-21.0/17-16.0/29/13)/(+21.0-25.0+19.0))*(-(+16.0-5.0+24.0*18/22)/(-8.0*8*10-7.0-10.0)))",
				"-345.83502768729755", true));
	}

	public void testAllOperACExpressionWITHBrackets97() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((+9.0*23/6-10.0)/(+9.0/47-5.0+20.0*1*15))/(-(+17.0)-(+24.0*5*7-19.0/47*34)))-(-(-(-13.0/29*23+3.0/18)*(+3.0*42*14+17.0))+(-(+14.0*6/26)-(+7.0*42*12+11.0/18+13.0/3*42)))",
				"21779.732586515092", true));
	}

	public void testAllOperACExpressionWITHBrackets98() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((-5.0/7*8+9.0*34)*(-13.0*35/5-1.0/26/45-2.0))*((+20.0*16/24)*(-1.0*10+8.0/10+18.0)))-(((+17.0/31*7+17.0/35+14.0*23*37)-(-4.0*20/42))*((+16.0*30/37-18.0+19.0*29)/(-12.0+20.0/40-1.0)))",
				"-2756097.991038429", true));
	}

	public void testAllOperACExpressionWITHBrackets99() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+21.0*40)/(+14.0*20+20.0))+(-(-17.0/12-10.0*25*1)/(+7.0*18*6)))/(((-18.0/8+20.0/4/33)-(-18.0/6*34+8.0/32))*(-(-15.0*3/14-7.0/1*48)*(+8.0*35+0.0+12.0*44)))",
				"9.033933631322904E-8", true));
	}

	public void testAllOperACExpressionWITHBrackets100() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((+8.0/42-14.0*27*15)-(-14.0/17/20+10.0-15.0/42*15))+(-(+2.0)-(-10.0)))/((-(+0.0-24.0+4.0)-(-12.0*10/3+8.0*16*3-19.0))*(-(+22.0+12.0/38-18.0)/(+8.0*7+24.0*3+24.0)))",
				"656.1696744719482", true));
	}

	public void testAllOperACExpressionWITHBrackets101() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(-3.0*18-13.0/10)*(-6.0/13-7.0*38/10))+(-(-20.0)+(+18.0*6)))+(-((+21.0*19)+(+18.0/44*17))+((-13.0*22-25.0)-(+15.0/12*28-22.0+4.0*44*4)))",
				"-3058.457622377622", true));
	}

	public void testAllOperACExpressionWITHBrackets102() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((-6.0/47)*(+6.0/30-11.0/5+7.0))/((+23.0-1.0*32*40-9.0*41/32)+(+11.0+20.0*35-23.0/36)))*((-(-10.0+20.0)/(-11.0/47*45))+(-(+8.0*5+17.0)-(+9.0/12-21.0/31+0.0)))",
				"0.06417979697021069", true));
	}

	public void testAllOperACExpressionWITHBrackets103() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+23.0/33*10+23.0/8)*(+24.0/45/49+23.0*22-25.0/20))*(-(-14.0/30)*(+6.0*29-1.0/23)))+(-((+12.0+12.0*29-5.0/17/20)-(+8.0+23.0/33/17))*(-(-25.0)+(+7.0*43*38+6.0/23+2.0/18)))",
				"-4437868.053096811", true));
	}

	public void testAllOperACExpressionWITHBrackets104() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((-6.0-5.0)-(+2.0*5/31-6.0/39-12.0))/(-(-11.0+19.0)-(+11.0*16*0-8.0/23+22.0/7)))/(((+22.0+9.0)+(-19.0-17.0/33))/((+8.0/31)+(+4.0-19.0/49/14)))",
				"0.028364080849509456", true));
	}

	public void testAllOperACExpressionWITHBrackets105() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((+3.0/31/20+2.0*38*24)*(-3.0/30))*(-(+19.0-7.0)/(+5.0/34*36)))/(-((+15.0*29+5.0*36/39+12.0*21)/(-5.0-8.0*26))-((+10.0)*(-12.0+4.0/34/2+6.0*13/40)))",
				"4.00781276755243", true));
	}

	public void testAllOperACExpressionWITHBrackets106() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((-18.0*22/16)-(-19.0+11.0))-(-(-2.0/41)*(+18.0-24.0/34*48+8.0)))-(-((+6.0-6.0*17/42+16.0*20*4)*(+22.0/34/43))-(-(+10.0*43-25.0)*(-20.0)))",
				"8135.6805233153955", true));
	}

	public void testAllOperACExpressionWITHBrackets107() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((-25.0+5.0*19-4.0*27*45)+(+24.0/18-16.0/48/3))+((+6.0+10.0*17-13.0)-(-5.0/10-14.0)))/(-((+4.0*31-3.0/13/13)*(+10.0*0/21+7.0-15.0*19*35))/((-17.0)-(+19.0*11*9-21.0/26/44-12.0/32/6)))",
				"-7.081600990935705", true));
	}

	public void testAllOperACExpressionWITHBrackets108() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+2.0*43-21.0)/(-7.0/2))+((-23.0)-(-2.0/26-7.0/39)))+(-(-(+11.0*4/42)-(+20.0*3))-(-(+13.0*6-11.0-13.0)-(+7.0/26/22-10.0/47*23)))",
				"151.48125810359852", true));
	}

	public void testAllOperACExpressionWITHBrackets109() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((-6.0*14)+(-14.0+11.0+9.0/27/6))/((+8.0/17+0.0)-(-13.0/46+4.0/38/38)))*(((-23.0*34/25)+(-9.0/33*48+20.0))/(-(+12.0/47+0.0*29+22.0/31)-(+9.0*1*37+15.0/6)))",
				"-8.391996869051821", true));
	}

	public void testAllOperACExpressionWITHBrackets110() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((+22.0/41+12.0*41*24)+(+4.0/27-21.0*33))*(-(+7.0+20.0/40*21-19.0)+(+22.0+0.0)))+(-(-(-22.0*33+15.0-11.0)/(-7.0))/((+0.0-16.0*28/26+4.0*45*36)-(+1.0*12/33)))",
				"-261218.57527713588", true));
	}

	public void testAllOperACExpressionWITHBrackets111() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(-2.0-2.0/17/37+17.0*10)/(+1.0/18))/((-7.0*4/35)-(+5.0*47*45+0.0/33)))/(((+7.0*44/9-13.0+19.0)*(+3.0*30/42+24.0*17))*(-(+1.0*29+11.0/40*3+8.0/9/36)+(+16.0)))",
				"1.2514659248882647E-6", true));
	}

	public void testAllOperACExpressionWITHBrackets112() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((+3.0/47)/(+20.0/40+15.0*24/19+20.0))/(-(+3.0-5.0*29/11)*(-2.0*22-3.0*32)))-(-((-25.0*28)-(+13.0*13))+(-(+5.0*22+24.0)*(-13.0*21)))",
				"-37450.999998864856", true));
	}

	public void testAllOperACExpressionWITHBrackets113() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((+1.0*0)*(-6.0-22.0*49+14.0))*((-12.0/37/8)-(+16.0*30)))-(-(-(+5.0+17.0/11/11)+(-7.0/47-20.0*45/44))/((-23.0+10.0-20.0*42/40)/(+8.0/23-3.0*0/17-7.0/15)))",
				"-0.08998321203696501", true));
	}

	public void testAllOperACExpressionWITHBrackets114() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((-7.0)+(+21.0/42/32-13.0*39+6.0/8))/((+5.0/40/36)-(-8.0/36*47)))+((-(+16.0)/(-16.0*32*1+6.0/34/26+20.0*33))/(-(-10.0)-(-11.0/16-24.0/36+17.0)))",
				"49.14227802965932", true));
	}

	public void testAllOperACExpressionWITHBrackets115() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(+2.0)-(+24.0/48))*((+15.0*21+22.0/1*16-20.0*35*32)-(-16.0*23*13-7.0/24*44)))*(((-23.0+1.0*28+7.0*0*34)/(+0.0*46-22.0*5/32+21.0*16*23))/(-(+18.0*34+11.0-19.0*19)/(-21.0*22*0-22.0*2*38)))",
				"174.898555339924", true));
	}

	public void testAllOperACExpressionWITHBrackets116() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(+20.0/15)+(-14.0-24.0+16.0))*(-(+1.0)/(+10.0+24.0*45-21.0)))*(-(-(-24.0/43+13.0+2.0/2)+(-16.0*32-23.0))+((+19.0*10*25+10.0-4.0)*(+13.0*36-19.0-17.0)))",
				"44858.07013727239", true));
	}

	public void testAllOperACExpressionWITHBrackets117() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+2.0+24.0-9.0*31*19)/(+19.0))+(-(-12.0/13*11+10.0)+(+7.0*11*47-18.0*3*13)))-(((+1.0/37)*(-15.0/29+24.0))*((+23.0/24/16+12.0*7/19-13.0*8)+(+24.0/46)))",
				"-3131.9548847959313", true));
	}

	public void testAllOperACExpressionWITHBrackets118() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((-13.0/46/11+1.0*36*44)+(+16.0*37/13+13.0))+((-8.0-12.0*3-4.0)*(-13.0)))*(-(-(+5.0/44-22.0)+(+14.0-19.0-5.0/40/20))/((+2.0/20+2.0*20/8)+(-6.0*25-2.0*30+16.0*43/15)))",
				"108.10696685160795", true));
	}

	public void testAllOperACExpressionWITHBrackets119() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+0.0)-(+24.0-22.0))-(-(-6.0-6.0*31/28)*(-10.0-16.0*32*20)))*(((-10.0)*(+22.0*41+22.0*41/21+13.0*12/7))*((+23.0/6*2-23.0*49/33-4.0*28*13)/(+15.0*16*38)))",
				"-2.0374699473130515E8", true));
	}

	public void testAllOperACExpressionWITHBrackets120() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((+0.0+8.0)-(+1.0))+(-(+23.0/21/40+24.0/27-16.0/26)-(+9.0*35)))+((-(-17.0*17*9+4.0*45*48-16.0)/(-19.0))/(-(-25.0*42+4.0*0+22.0)*(+17.0*6+4.0)))",
				"322.30379433681685", true));
	}

	public void testAllOperACExpressionWITHBrackets121() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(+20.0*12/29-17.0/16*15)+(+1.0/9-14.0+20.0*14))+((+2.0-20.0-17.0*1)/(+23.0-22.0*28*47-13.0/43)))*(-((+24.0*33+8.0-5.0)-(+4.0/22-23.0*2/48))/(-(+10.0*27/12-25.0/24*26+12.0/34*43)-(-1.0+18.0*43*27)))",
				"-10.420183709285576", true));
	}

	public void testAllOperACExpressionWITHBrackets122() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+3.0/13/10+5.0/23-9.0)*(-25.0/30))-((-14.0*27*42-20.0-18.0*28)*(-16.0*13+9.0/40)))-(((+13.0-14.0+23.0)*(+24.0*3/2))+(-(-13.0/46/20)+(-1.0-5.0-10.0/15/31)))",
				"-3408288.693015248", true));
	}

	public void testAllOperACExpressionWITHBrackets123() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+24.0/35/13+22.0+6.0/30*37)/(-1.0*17*40-4.0+13.0/39*3))+(-(+6.0/34*19)/(+7.0/12/38+19.0/5/4)))/(((-6.0-5.0*15)+(+6.0*1/13-13.0))-((-18.0)+(-23.0-21.0/17-18.0*42*38)))",
				"-1.19615063978712E-4", true));
	}

	public void testAllOperACExpressionWITHBrackets124() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+19.0+0.0/43*35)+(-13.0+8.0+19.0*20/4))-(-(-10.0/45)*(+4.0*32*20)))*(-((+5.0/18+21.0-9.0/30*25)-(-10.0*46+17.0+11.0))+((-10.0*16*0+14.0/41/43-24.0)+(+24.0/48*11+20.0*22+3.0*36)))",
				"-38506.57173518764", true));
	}

	public void testAllOperACExpressionWITHBrackets125() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(-17.0*0/7)+(+3.0*37*7+9.0*4/10-1.0*37))/(-(+20.0/8/45)+(+13.0)))/((-(+15.0*15/48-9.0+20.0)/(-2.0))-(-(-2.0*17/25+22.0*30)+(+0.0-20.0/9)))",
				"-0.08590545912328365", true));
	}

	public void testAllOperACExpressionWITHBrackets126() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((-5.0+21.0-7.0*19)-(-9.0*26/14))+((+12.0*8/35-25.0/4)*(-4.0/30-17.0*49)))-(((-11.0-14.0-19.0*9)/(+7.0+3.0/40))-((+8.0/2*29+11.0/8/46)/(+21.0+21.0)))",
				"3052.6691300049747", true));
	}

	public void testAllOperACExpressionWITHBrackets127() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(-13.0*30)*(-13.0))/(-(+4.0*27*7+13.0+3.0*30)-(-25.0)))/(-((+22.0/3*23+0.0/49+1.0)+(+24.0/11/33+15.0/18))+((-17.0/42-16.0/25+24.0/22*23)*(+23.0*43/6)))",
				"0.0016027080977918037", true));
	}

	public void testAllOperACExpressionWITHBrackets128() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(+16.0+12.0-3.0)+(-23.0*22*31))-(-(+3.0*3-13.0-14.0)*(+21.0*18*16+12.0/43/5-25.0*0*10)))+(-(-(+12.0/24+19.0/47)*(+20.0*42/21-23.0+19.0/9))/((-10.0*39)-(+5.0/21-17.0*31*10+21.0/9/44)))",
				"93154.00819262897", true));
	}

	public void testAllOperACExpressionWITHBrackets129() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((+20.0*41/21-5.0*21)+(+16.0*49/5+7.0*0))-((+12.0*43)*(-8.0/10)))+(-(-(+18.0/30-17.0*7+5.0/45/10)-(+0.0-4.0))/((-12.0+17.0/13)+(+7.0/49/48-3.0*10/21-3.0/23)))",
				"-311.9600953250119", true));
	}

	public void testAllOperACExpressionWITHBrackets130() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+17.0-23.0/5/46-17.0/18)-(+19.0-19.0/16-19.0*27))-(-(-23.0*40-22.0-25.0/47)-(-13.0+11.0+15.0)))/(-(-(-21.0+16.0)-(+16.0))*((-12.0/41)/(+8.0/17-12.0+10.0)))",
				"-213.91255280695984", true));
	}

	public void testAllOperACExpressionWITHBrackets131() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+19.0*40+14.0*27-17.0/7*14)/(+2.0/48))+((+20.0/35-4.0+16.0*3/20)*(+9.0/23-12.0)))*((-(+12.0)-(-17.0/40))+(-(-3.0/29*10)/(-18.0*6+2.0/34)))",
				"306806.8071629386", true));
	}

	public void testAllOperACExpressionWITHBrackets132() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((-15.0/12)-(-7.0-14.0/14*6))*(-(-6.0/4-18.0/12)/(-25.0*39+6.0*27/44)))-((-(+0.0+0.0/3/42)*(-5.0*36))*(-(-17.0-12.0/12-20.0/34/27)/(-9.0)))",
				"0.036290888670504", true));
	}

	public void testAllOperACExpressionWITHBrackets133() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(-18.0*22+11.0/10*18+2.0/31/10)-(-6.0))+(-(-6.0*14/27+14.0/12*20)+(+2.0/34+19.0/32)))-(-(-(+8.0/12)-(+4.0-15.0*16/46))-((-12.0/36-12.0*40)/(-10.0*46*36+20.0/26)))",
				"402.3429287010665", true));
	}

	public void testAllOperACExpressionWITHBrackets134() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((-22.0*45*19-9.0/21*8-4.0*34/19)/(+18.0*30+3.0))-((+3.0)*(-21.0*5/22+3.0)))/(-((-14.0*29/29)+(+10.0-22.0+19.0*9/41))+((-10.0-18.0/3+17.0)/(-22.0/45*19+23.0+7.0)))",
				"-1.3412012007418197", true));
	}

	public void testAllOperACExpressionWITHBrackets135() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+0.0*49-24.0/4)-(-20.0/31))+(-(-25.0/48*21)*(+19.0+22.0)))-((-(-14.0*32*39)*(+20.0))+((-4.0*4/45+22.0/35/25)*(+3.0*43+11.0*3+8.0)))",
				"-349826.9125025601", true));
	}

	public void testAllOperACExpressionWITHBrackets136() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((-11.0*32/36-1.0/24)-(+13.0/38))/((+8.0*2)-(-10.0/47/6-16.0+20.0)))*(-(-(+18.0/49)*(+24.0/10/37-19.0))*((-1.0-24.0+22.0)/(-23.0-16.0-1.0*24*40)))",
				"0.017635907681940843", true));
	}

	public void testAllOperACExpressionWITHBrackets137() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+3.0+7.0+14.0*47*13)+(+5.0-9.0*45))+((-16.0+16.0/27)/(-12.0-2.0)))/(-((+8.0*37+11.0*24-20.0/4)*(-1.0*8*4+9.0/16/36-21.0*15/17))+((-19.0/43-2.0+3.0/33)*(+14.0/13/8+9.0/11/32-22.0)))",
				"0.29071268017370305", true));
	}

	public void testAllOperACExpressionWITHBrackets138() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((-12.0)/(+9.0/10+19.0-8.0))+(-(-5.0*32/49-6.0*6*6+18.0/2/28)+(+9.0/44/23+12.0*48*10-13.0/33)))+(((+0.0*8/3-3.0)-(-8.0-23.0*45*22))-(-(+10.0)/(-22.0)))",
				"16794.978219746397", true));
	}

	public void testAllOperACExpressionWITHBrackets139() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((+13.0*7/34-11.0*43*38)+(+3.0))-((-24.0/47*26)*(+11.0/31*7-20.0/31)))+(-((+0.0-13.0/14)-(+0.0+3.0/15*42-16.0*43))+((-2.0*39-25.0/31/43)*(-18.0)))",
				"18718.401490315366", true));
	}

	public void testAllOperACExpressionWITHBrackets140() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+13.0)+(+22.0*46+7.0-11.0))+(-(+9.0/26+1.0/36*46-16.0/17*17)*(+7.0*34+8.0*5*47)))+(-((+23.0/12-19.0*18+7.0/15)*(+17.0*2/41))*((+5.0*29+20.0*33*32)*(-17.0/42*28-23.0/2)))",
				"-1.3677876920726496E8", true));
	}

	public void testAllOperACExpressionWITHBrackets141() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((-2.0/8/7-12.0*5)+(-20.0-10.0/20))-(-(-1.0-2.0/9)/(+19.0/22*17)))/(-(-(-20.0*45/5)-(+0.0*25+15.0*40+0.0))+(-(-6.0*27)/(-23.0*20-19.0*39/16)))",
				"-0.19169953149855362", true));
	}

	public void testAllOperACExpressionWITHBrackets142() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((-16.0+4.0-20.0/43/17)/(-9.0/48/15+19.0-5.0))+(-(+12.0)-(+4.0-11.0/44/36-15.0)))/(-(-(+8.0)+(-11.0))-((+13.0*0-25.0/49-10.0)-(+12.0-20.0*27+5.0)))",
				"-2.6989553370451345E-4", true));
	}

	public void testAllOperACExpressionWITHBrackets143() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((-17.0*8*6-1.0-17.0*40)/(+16.0-21.0*30))/((-5.0-14.0*36)-(-8.0/39+17.0)))-(((-10.0*24/22-20.0+1.0/6)+(-19.0+14.0*8-5.0/17*19))-(-(-8.0+17.0*13/9)-(+16.0-16.0)))",
				"-73.22025901914932", true));
	}

	public void testAllOperACExpressionWITHBrackets144() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+12.0*12+3.0/12*0+2.0*15)-(-14.0))/(-(-14.0*24/5+13.0/13*5-4.0/2)*(-11.0*41+12.0/17)))+(((+21.0+20.0*1)-(+0.0-6.0*28/11))+((+24.0*13)*(+22.0*44-12.0/10+7.0/23)))",
				"301792.83575220336", true));
	}

	public void testAllOperACExpressionWITHBrackets145() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+9.0+2.0+16.0)/(+3.0/8-4.0))+(-(+20.0/34-8.0)+(+16.0/20/29-5.0/45*23)))*(-(-(-15.0/44/3-17.0-3.0)*(+14.0-14.0/31))/(-(-13.0*12*38)*(-2.0-23.0/29)))",
				"-0.04220679517099725", true));
	}

	public void testAllOperACExpressionWITHBrackets146() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(-23.0*10+16.0*32)-(+17.0*21-25.0*31+15.0))*((+18.0/18-24.0*4/31-11.0)-(-11.0*1*20)))*(-(-(+14.0/25/2-3.0/39*45-14.0)-(+20.0/27+0.0/44-16.0))-((+17.0/18/22+14.0*23+0.0)-(-10.0/15/24+13.0/5)))",
				"-8810206.690311551", true));
	}

	public void testAllOperACExpressionWITHBrackets147() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(+2.0/7)+(+10.0*29))/(-(+9.0*9*6+15.0+24.0/12)/(-7.0/7-4.0*40)))*((-(+18.0/18*41)*(+4.0/28/29))/(-(-5.0-16.0*20*48-4.0)/(-7.0*13/43-13.0+10.0/8/20)))",
				"-0.018344908411460796", true));
	}

	public void testAllOperACExpressionWITHBrackets148() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+19.0*31*22+24.0)-(-22.0/18/5+11.0/12*42-23.0))-(-(+13.0*37*39+3.0/12)+(-14.0*38-14.0/38*10-13.0/15)))/(-((-19.0*49-4.0)+(-8.0*17-18.0/4))-(-(-18.0/36+10.0+13.0/36/16)+(-21.0/7*24+21.0*41+6.0)))",
				"-111.24149883727414", true));
	}

	public void testAllOperACExpressionWITHBrackets149() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((-5.0*21*39)*(+4.0-14.0*24*1))-(-(-17.0+6.0*11)*(+16.0)))*((-(+0.0*27-5.0+15.0)*(+1.0*43/47-1.0/3))-((+19.0/45*8)+(+12.0/44-4.0/37)))",
				"-1.271523834809045E7", true));
	}

	public void testAllOperACExpressionWITHBrackets150() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+18.0/30*5)-(-23.0/14*15))+((+7.0/27*38)/(+0.0*30+3.0/31)))*(((-20.0-10.0*10)-(-10.0*45-20.0/8))*(-(+18.0/43/30)*(-17.0/9/28+23.0*37/34-18.0/12/48)))",
				"14972.534308077064", true));
	}

	public void testDivisionByZero1() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+7.0-5.0)/(-22.0*48.0-7.0-8.0/0.0))/((+6.0/45.0+21.0*3.0*48.0)*(+23.0*39.0*35.0)))*((-(+2.0/40.0/21.0)*(+12.0*16.0*29.0-1.0/34.0))-(-(+2.0*7.0)/(+1.0/30.0*43.0-13.0/4.0-5.0/33.0/47.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero2() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+17.0*7.0)/(-7.0/0.0*12.0-5.0+23.0*23.0/45.0))/(-(+6.0/31.0*30.0-18.0/47.0)+(+19.0*39.0)))-(-(-(+17.0)-(+14.0*14.0-23.0))/((-18.0)*(-2.0*14.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero3() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((-13.0-23.0)/(+21.0/0.0/36.0))-(-(+4.0/49.0*37.0+24.0*2.0)+(-2.0*2.0/42.0-22.0*4.0)))/(((+11.0*25.0*21.0)+(-10.0))+(-(-15.0)-(-15.0*18.0/16.0-4.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero4() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(+9.0*12.0*36.0)/(+15.0/0.0+7.0/21.0*29.0))-((+19.0+24.0*38.0)/(-15.0+9.0*2.0*27.0)))/((-(-9.0/6.0/25.0+24.0+5.0/36.0/12.0)-(-1.0*41.0/38.0+7.0/47.0))/(-(+17.0)-(-23.0/17.0/16.0-17.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero5() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+4.0)/(-25.0/0.0-19.0))-(-(+9.0)/(+18.0-5.0/13.0*4.0)))+(((+4.0/45.0-23.0-20.0/19.0*17.0)-(-22.0-6.0))/(-(-16.0-19.0/35.0/24.0)+(-24.0*3.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero6() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+2.0-14.0*34.0-24.0)/(+19.0-6.0/0.0*3.0))/((-11.0+2.0*48.0+15.0/15.0)*(-1.0*9.0)))*(-((+1.0-16.0/29.0+19.0/46.0)/(+1.0+11.0*14.0))*(-(+18.0-23.0)+(-17.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero7() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(+13.0-8.0-6.0)*(-2.0*23.0*38.0-2.0*14.0))+((-13.0)/(+23.0/0.0+6.0-12.0)))-(-(-(-17.0*46.0/12.0-24.0*35.0+5.0*31.0)*(-23.0/13.0/46.0))*(-(-18.0/42.0*36.0-21.0/16.0*7.0+1.0/12.0)*(+1.0*29.0/25.0-8.0*39.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero8() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+16.0)/(+9.0-24.0+21.0/0.0*19.0))-((-19.0/23.0+18.0)/(+16.0/34.0+22.0/40.0-10.0/9.0*37.0)))/(((+3.0/21.0/39.0+1.0*40.0/10.0+9.0*25.0)+(-21.0*47.0+24.0*10.0-11.0))*(-(+14.0*23.0-14.0/12.0*11.0+8.0)+(+6.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero9() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((+23.0+3.0*14.0)/(+12.0-13.0*49.0/0.0-6.0*31.0/20.0))+(-(+3.0*46.0/3.0)+(-8.0/1.0+12.0/15.0*18.0+1.0)))+(-(-(-21.0/4.0*46.0+11.0)+(+0.0+3.0*8.0))-(-(+14.0/6.0+18.0-18.0*43.0)/(-6.0*30.0*0.0-17.0/38.0*17.0-17.0*35.0*26.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero10() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+5.0+0.0-5.0)/(-25.0-9.0*2.0/0.0-23.0))+(-(-6.0)/(-25.0*7.0-1.0)))-(-(-(+0.0*0.0+8.0*44.0)/(-1.0/32.0/37.0+13.0*11.0/45.0-16.0/3.0/4.0))*((-6.0/4.0+4.0)-(+1.0/43.0-18.0*35.0*46.0-4.0*13.0*46.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero11() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+6.0*14.0*37.0)/(+15.0*36.0-22.0/0.0-9.0))+(-(-7.0-2.0)/(-9.0-9.0/17.0-5.0*40.0)))*(-(-(-5.0/27.0)*(-13.0))/((-1.0)+(+5.0*46.0+4.0/10.0*34.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero12() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(-21.0)/(+23.0/0.0))-((+15.0+2.0/1.0+17.0)/(+0.0/41.0*27.0+20.0)))-(-((-7.0*45.0)/(+11.0/24.0/31.0+6.0/24.0*3.0))-(-(+15.0/16.0*11.0-11.0)/(+6.0/20.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero13() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(-8.0*39.0*36.0+4.0-2.0)/(-9.0*44.0/0.0+3.0+4.0/46.0))+((+9.0/37.0+15.0*28.0-3.0)/(+24.0*27.0-3.0/27.0)))/(-(-(-18.0+16.0)-(-12.0*47.0/23.0+6.0/39.0))/((+16.0-18.0/15.0-5.0/44.0)-(+3.0*19.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero14() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(-14.0)/(-20.0*48.0+7.0/0.0-23.0/30.0))+((-18.0*40.0-2.0)-(+3.0+2.0)))/(-((+10.0*16.0+0.0+6.0*49.0*10.0)*(+24.0))/((+11.0/21.0)+(+16.0*48.0/13.0+20.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero15() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(-24.0*4.0*32.0-12.0+2.0*43.0)/(-1.0/0.0-14.0*38.0-21.0*15.0))/((+18.0*14.0)+(-7.0-3.0/18.0+23.0/48.0)))-((-(+10.0/41.0)/(-23.0/38.0*37.0+17.0/42.0+13.0))/((+11.0/48.0)/(+9.0*22.0/23.0+20.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero16() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(+24.0-1.0)/(+18.0/0.0*39.0))-((-3.0*25.0*4.0)+(-18.0*25.0*21.0-17.0*20.0*43.0)))+(-(-(-1.0/6.0)/(+13.0+9.0*37.0-4.0/33.0))/((+9.0-18.0*41.0+20.0/3.0)/(+2.0*36.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero17() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+20.0+14.0*12.0)/(-10.0+12.0/0.0-13.0/22.0))-((-9.0/12.0-9.0/48.0)+(-25.0*22.0-17.0*11.0)))+(((+23.0-8.0)*(+16.0*13.0-15.0/49.0*48.0+17.0*43.0))-(-(-19.0+5.0/22.0)/(+2.0+7.0/6.0*47.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero18() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(-21.0*10.0*19.0+3.0*4.0)/(+18.0/0.0+22.0/44.0/41.0))*((-3.0/46.0)-(-1.0)))-(-(-(+15.0/15.0-11.0*32.0)*(-11.0))-((-21.0*5.0/21.0)-(-12.0/18.0-25.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero19() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+8.0-17.0+22.0)/(+24.0*27.0+6.0*9.0/0.0+7.0))*(-(+12.0/18.0/6.0)/(+14.0/7.0*12.0)))*((-(-13.0/33.0+10.0*13.0/47.0-18.0)+(+1.0/15.0+19.0/47.0/29.0))/((-8.0/23.0)*(-4.0*0.0-9.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero20() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+9.0-9.0-3.0)/(+9.0*20.0/0.0))/((-15.0*38.0*44.0+16.0*27.0*38.0)-(-3.0/10.0*2.0)))+((-(+19.0)-(+24.0/14.0-10.0/1.0))/((+22.0*30.0+9.0*41.0/3.0-24.0/5.0/27.0)+(-15.0*17.0/10.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero21() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((-1.0*21.0)/(+7.0-5.0/0.0/22.0+3.0*24.0))/(-(-6.0/29.0/8.0+14.0*14.0*7.0-11.0*25.0*10.0)-(+6.0/3.0)))-(-((+8.0-24.0/31.0/11.0+10.0)+(-17.0))*(-(+6.0*43.0+13.0*26.0)-(-9.0*4.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero22() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+8.0*49.0*30.0)/(-25.0/0.0-21.0*8.0*9.0))+((+5.0/41.0*11.0)+(+20.0/28.0*5.0)))/((-(+22.0-15.0-23.0)/(-4.0*6.0*36.0-17.0/29.0-18.0))-((+2.0*9.0/21.0+16.0)-(+4.0/6.0+9.0*5.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero23() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(+19.0*46.0)/(-15.0+17.0/0.0-3.0/46.0*46.0))/(-(-7.0/33.0/14.0+14.0*11.0*6.0+9.0/14.0)*(-10.0+5.0+6.0)))-(-((+0.0/48.0*47.0)*(+22.0+16.0))+(-(-5.0*15.0+5.0*18.0*28.0)-(+5.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero24() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((-18.0*45.0*29.0)/(-11.0/0.0/5.0))*((+21.0-8.0*14.0+5.0)+(-7.0*11.0+3.0)))-(-(-(+1.0/36.0/19.0)/(-7.0+23.0*28.0/33.0+17.0/25.0/36.0))/(-(-13.0-12.0/30.0-14.0*34.0)+(+20.0+2.0*5.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero25() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(((+3.0)/(-9.0*36.0/0.0))/((-15.0/16.0+23.0*19.0*6.0+21.0*25.0)/(+18.0)))/(((-22.0*13.0)+(+13.0-17.0*13.0+14.0))+((-10.0/11.0/25.0+11.0-14.0*17.0/39.0)+(-19.0*35.0-14.0*27.0*42.0-2.0/15.0/25.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero26() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+5.0+19.0)/(-5.0*29.0*32.0+15.0-23.0/0.0))*(-(+5.0*34.0*15.0+21.0*11.0+23.0/21.0)+(-13.0+8.0/27.0*34.0)))*(-((-5.0/14.0*15.0)*(-5.0-23.0*30.0*12.0))/((-4.0*17.0-2.0/43.0*29.0)*(+19.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero27() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(+1.0+0.0*37.0)/(+22.0/0.0-21.0*30.0*0.0))*((-10.0/9.0/34.0+7.0*28.0/3.0)-(-15.0/46.0+15.0*22.0)))/((-(-8.0*33.0*42.0-13.0*6.0+11.0/40.0/15.0)/(+3.0/26.0))+(-(+6.0+24.0)+(-14.0*30.0/10.0+15.0*38.0-6.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero28() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+18.0)/(-12.0-5.0*38.0-15.0/0.0))+((+13.0*34.0)-(-19.0)))+(-((+23.0+23.0*29.0*20.0-9.0/12.0/35.0)-(-10.0/37.0/31.0-2.0))/((+19.0*14.0/27.0)+(-1.0-10.0/20.0*19.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero29() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((-25.0*23.0*29.0)/(+16.0-14.0/0.0*11.0+13.0))+((+19.0-24.0/27.0+0.0)+(+10.0/9.0+24.0*10.0/30.0)))/(((+4.0*32.0-25.0/16.0+19.0/7.0)+(+5.0*7.0-20.0+19.0))*(-(+20.0*8.0)-(-19.0*39.0*5.0+18.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero30() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((+13.0*21.0*13.0+18.0*23.0*23.0)/(-18.0+12.0/0.0+21.0))-(-(-25.0*44.0*32.0-19.0)-(+19.0*43.0+8.0/40.0-21.0/33.0*31.0)))+(-((+14.0)/(+18.0/11.0))*((-7.0/29.0)*(-11.0*36.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero31() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(-1.0*24.0*44.0+16.0*14.0*25.0)/(-18.0/0.0-8.0-9.0))*((-23.0*18.0*40.0+11.0-6.0/23.0)+(-9.0/49.0*43.0-13.0/10.0/9.0)))+(-(-(+17.0)/(-8.0+4.0*49.0*17.0))/((-15.0/34.0+10.0/29.0)-(+4.0*37.0/38.0-8.0*49.0+1.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero32() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(+11.0*21.0*42.0)/(-23.0/0.0/27.0-23.0*16.0))*(-(+11.0-22.0)+(-18.0*18.0)))*(((-21.0*18.0*33.0-25.0*37.0+19.0*13.0*12.0)+(+16.0/21.0*13.0))+((-16.0/45.0/48.0-11.0/42.0)/(+4.0*42.0-2.0-16.0*11.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero33() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(-8.0+9.0)/(+5.0-8.0*23.0/0.0))+((+16.0*3.0*22.0)-(-16.0-20.0/36.0/9.0)))-(((+17.0*44.0/37.0)-(-9.0-12.0*43.0*32.0+7.0*33.0/19.0))/((-21.0*26.0/3.0)/(-20.0+10.0*3.0*18.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero34() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-((+6.0*6.0-3.0)/(+2.0+19.0/0.0-23.0/33.0/33.0))-((-7.0*45.0*21.0+12.0*42.0/7.0)+(-21.0)))/(((+22.0/38.0+17.0+0.0*31.0*48.0)+(-2.0))+((-25.0*0.0*28.0+7.0*43.0-19.0*7.0)/(+20.0+0.0/46.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero35() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((-9.0*48.0)/(-25.0/0.0+1.0/40.0*45.0-3.0/9.0/25.0))/((-19.0*8.0-1.0/20.0*12.0+13.0/38.0*22.0)/(+1.0)))/(-((-25.0*11.0/36.0)*(+18.0*27.0*9.0+2.0/44.0-16.0/41.0/37.0))+((-17.0/16.0*46.0+22.0*17.0-20.0/35.0/34.0)/(-21.0-12.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero36() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((-10.0-16.0)/(-2.0/0.0-20.0/30.0))+(-(-16.0*22.0+23.0/20.0-5.0*7.0/19.0)-(-18.0/3.0-20.0*39.0/46.0)))+(((-21.0*16.0+22.0/37.0/17.0-4.0)-(+1.0*17.0*45.0-8.0*24.0*6.0+21.0/3.0))-(-(+20.0*20.0)*(-1.0*11.0-9.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero37() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+21.0+17.0*6.0*15.0)/(-4.0/0.0-5.0/25.0*2.0))/((+10.0/22.0-21.0/4.0-23.0/40.0/1.0)+(+18.0/34.0-12.0/46.0*0.0)))/(((-11.0-16.0*20.0*26.0+2.0/37.0)+(+13.0+4.0*41.0))/(-(+11.0/22.0*49.0)/(+0.0*12.0-7.0/9.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero38() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-((-(+20.0-14.0)/(-10.0*4.0-3.0/0.0/32.0+16.0/4.0))/(-(+21.0*20.0)-(+24.0/38.0+21.0*0.0/28.0-18.0*4.0)))-((-(+20.0/26.0*3.0)+(+0.0-13.0/4.0*11.0))+((-23.0/27.0/18.0+14.0*38.0)+(+16.0/19.0/49.0-1.0/48.0*34.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero39() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(-(-(-1.0+17.0)/(+8.0-19.0*27.0/0.0+7.0))*(-(+15.0+16.0/41.0-10.0)/(-22.0*47.0*44.0)))-((-(+21.0*7.0*13.0)/(-14.0))*((-11.0/9.0*34.0)*(+11.0*21.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero40() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(+7.0)/(-13.0+20.0/0.0/33.0))/(-(-23.0/35.0-9.0*29.0/49.0)+(-24.0*40.0-17.0*32.0/41.0+14.0/33.0*43.0)))*(((+14.0*12.0-9.0*26.0*45.0)-(-11.0+19.0/7.0-17.0*30.0))*(-(+6.0)+(-17.0*31.0-15.0*5.0/6.0+6.0*41.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero41() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+16.0)/(+1.0*0.0+7.0/0.0))+(-(-22.0/37.0)*(+21.0/10.0*13.0)))/(-(-(-10.0/44.0/21.0+14.0/16.0)/(-17.0+19.0/47.0))-((+15.0/38.0/34.0)-(-10.0/16.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero42() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(-2.0*39.0+12.0-16.0*3.0)/(+21.0/0.0-4.0/18.0))/(-(+16.0*29.0-21.0)-(+13.0+5.0*30.0*4.0+16.0*4.0)))+((-(-11.0/37.0/5.0+17.0/45.0/1.0-4.0/43.0/31.0)*(+18.0*26.0*46.0))*((-11.0*4.0*48.0-19.0)/(+8.0/23.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero43() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((-16.0)/(+9.0/0.0*21.0-22.0/21.0/14.0-21.0/1.0/32.0))*((-20.0*26.0)+(+9.0*36.0+7.0+6.0*23.0*27.0)))/(-((+14.0/16.0*25.0-14.0*16.0)+(+16.0/32.0/11.0))*(-(-10.0*33.0*5.0+18.0/44.0*37.0-2.0*35.0)/(+12.0-7.0/28.0*9.0+24.0/5.0/16.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero44() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+8.0*12.0-24.0*12.0-16.0*40.0)/(+22.0/0.0))+((-10.0-12.0/29.0)-(-16.0*20.0*1.0+17.0*16.0-9.0)))*((-(-19.0-2.0+5.0)/(-2.0*4.0/7.0))-(-(-8.0*13.0+21.0/23.0-9.0)*(-24.0-16.0*9.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero45() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+20.0-18.0*12.0*47.0)/(-8.0*7.0/0.0-4.0+20.0*10.0/6.0))*((+24.0/11.0-25.0/48.0*22.0+6.0)-(-10.0/38.0+17.0*12.0*34.0-17.0*11.0/41.0)))/((-(+15.0/40.0/13.0+19.0/39.0*13.0-25.0)-(-5.0))-(-(-4.0/49.0*43.0-17.0/7.0*9.0)+(+9.0*7.0*37.0-2.0/22.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero46() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-((-23.0-24.0)/(-20.0/0.0*23.0-1.0/27.0/19.0+11.0/39.0))-(-(+12.0/23.0/44.0+15.0+8.0*34.0)-(+9.0*48.0)))-(-(-(+12.0+18.0*37.0)/(+22.0+21.0*29.0))+(-(-23.0*25.0/6.0+22.0*31.0*25.0-22.0)/(-19.0+15.0*45.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero47() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(-13.0*22.0)/(+6.0/0.0/36.0+0.0*7.0))+((-6.0*28.0*35.0-4.0/12.0+23.0/41.0)+(-13.0*11.0+23.0*17.0-22.0*4.0)))-((-(+9.0*0.0*33.0)/(-21.0-9.0/37.0*43.0))+(-(-8.0-25.0*42.0/46.0)+(+14.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero48() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"-(((+0.0)/(-13.0*23.0+13.0/0.0/18.0))*(-(-8.0/10.0+6.0/36.0+22.0)/(+19.0+18.0)))*((-(+9.0)*(+6.0/46.0))-(-(-18.0/14.0+11.0-4.0/43.0/21.0)/(-18.0/34.0/26.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero49() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"(-(-(+3.0+1.0*17.0)/(+6.0/0.0/13.0))/(-(+20.0-7.0+20.0*32.0*16.0)*(-24.0-22.0*7.0/7.0-1.0)))+((-(-22.0/26.0/15.0+1.0/11.0-23.0/45.0)-(-20.0*34.0+21.0*20.0*24.0))-(-(+3.0+14.0/6.0)+(+7.0*26.0*44.0)))",
				"Division by zero", false));
	}

	public void testDivisionByZero50() {
		MainActivity o = new MainActivity();
		Assert.assertTrue(isCorrect(
				o,
				"((-(-22.0)/(-17.0/0.0+5.0*15.0-3.0))+(-(-2.0*0.0/40.0-11.0*12.0*17.0+9.0/18.0)-(+5.0/26.0+21.0/40.0/34.0-4.0*19.0/28.0)))-((-(-13.0/34.0*16.0+1.0/27.0*45.0-17.0/4.0)/(+13.0/16.0/13.0-2.0*31.0*7.0))-(-(-18.0/39.0)-(+9.0+15.0-18.0*5.0)))",
				"Division by zero", false));
	}

}
